// Code generated by MockGen. DO NOT EDIT.
// Source: supopo.go
//
// Generated by this command:
//
//	mockgen -source=supopo.go -destination=./mock/supopo.go
//

// Package mock_supopo is a generated GoMock package.
package mock_supopo

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockpercentileTracker is a mock of percentileTracker interface.
type MockpercentileTracker struct {
	ctrl     *gomock.Controller
	recorder *MockpercentileTrackerMockRecorder
}

// MockpercentileTrackerMockRecorder is the mock recorder for MockpercentileTracker.
type MockpercentileTrackerMockRecorder struct {
	mock *MockpercentileTracker
}

// NewMockpercentileTracker creates a new mock instance.
func NewMockpercentileTracker(ctrl *gomock.Controller) *MockpercentileTracker {
	mock := &MockpercentileTracker{ctrl: ctrl}
	mock.recorder = &MockpercentileTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpercentileTracker) EXPECT() *MockpercentileTrackerMockRecorder {
	return m.recorder
}

// percentileMicroseconds mocks base method.
func (m *MockpercentileTracker) percentileMicroseconds(percentile float64) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "percentileMicroseconds", percentile)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// percentileMicroseconds indicates an expected call of percentileMicroseconds.
func (mr *MockpercentileTrackerMockRecorder) percentileMicroseconds(percentile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "percentileMicroseconds", reflect.TypeOf((*MockpercentileTracker)(nil).percentileMicroseconds), percentile)
}

// recordMicroseconds mocks base method.
func (m *MockpercentileTracker) recordMicroseconds(v time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "recordMicroseconds", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// recordMicroseconds indicates an expected call of recordMicroseconds.
func (mr *MockpercentileTrackerMockRecorder) recordMicroseconds(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "recordMicroseconds", reflect.TypeOf((*MockpercentileTracker)(nil).recordMicroseconds), v)
}
